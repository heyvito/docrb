module Renderer
  module Entities
    class Base
      type method_kind = :def | :sdef
      type entity_kind = :module | :class | method_kind
      type visibility = :public | :private | :protected
      type model = Hash[Symbol, untyped]

      attr_accessor name: String

      attr_accessor parent: untyped

      attr_accessor references: Array[Reference[any]]

      def initialize: (untyped parent, String name) -> void

      def register_reference: (Reference[any] ref) -> void

      def type: () -> entity_kind

      def module?: () -> bool

      def class?: () -> bool

      def def?: () -> bool

      def static?: () -> bool

      def root: () -> Module
    end
  end
end
