module Renderer
  module Entities
    class Container < Base
      attr_accessor classes: ::Array[Class]

      attr_accessor modules: ::Array[Module]

      attr_accessor extends: ::Array[Reference[Module]]

      attr_accessor includes: ::Array[Reference[Module]]

      attr_accessor defs: ::Array[Method]

      attr_accessor sdefs: ::Array[Method]

      attr_accessor defined_by: SourceDefinition

      attr_accessor doc: untyped # TODO

      def initialize: (Container parent, Base::model model) -> void

      def init_entities: (Base::model model, Symbol key, as: ::Class) -> untyped

      def init_reference: (Reference::model model, Symbol attr) -> Reference[untyped]?

      def init_references!: (Base::model model, Symbol key, ?attr: Symbol?) -> ::Array[Reference[untyped]]

      def init_reference!: (Reference::model model, Symbol attr) -> Reference[untyped]
    end
  end
end
